#!/usr/bin/env python
import rospy
import threading
import std_srvs.srv
from yaml import load, Loader

class Checker(object):
    def __init__(self, name, message_field):
        self.name = name
        self.message_field = message_field
    
    def calibrate(self, msg):
        pass

    def getattr_recursive(self, msg, field_name):
        if len(field_name) == 1:
            return getattr(msg, field_name[0])
        else:
            return self.getattr_recursive(getattr(msg, field_name[0]), field_name[1:])

class RangeChecker(Checker):
    
    def __init__(self, name, message_field, standard_values, relative_upper_bounds, relative_lower_bounds):
        super(RangeChecker, self).__init__(name, message_field)
        self.standard_values = standard_values
        self.relative_upper_bounds = relative_upper_bounds
        self.relative_lower_bounds = relative_lower_bounds
        self.previous_msg = None
        rospy.loginfo("%s consistency checker: Initialized range check with standard values %s, relative upper bounds %s, relative lower bounds %s", self.name, [self.standard_values[b] for b in self.standard_values], [self.relative_upper_bounds[b] for b in self.relative_upper_bounds], [self.relative_lower_bounds[b] for b in self.relative_lower_bounds])
        
    def __str__(self):
        return str(self.name)+": range check with standard values "+str([self.standard_values[b] for b in self.standard_values])+", relative upper bounds "+str([self.relative_upper_bounds[b] for b in self.relative_upper_bounds])+", relative lower bounds "+str([self.relative_lower_bounds[b] for b in self.relative_lower_bounds])
        
    def check(self, msg):
        self.previous_msg = msg
        for elem in self.relative_upper_bounds:
            message_fields = self.message_field.split('.')+[elem] if self.message_field != "" else [elem]
            if float(self.getattr_recursive(msg,message_fields)) > float(self.standard_values[elem]) + float(self.relative_upper_bounds[elem]):
                raise ValueError(str(elem)+' data out of range')
        for elem in self.relative_lower_bounds:
            message_fields = self.message_field.split('.')+[elem] if self.message_field != "" else [elem]
            if float(self.getattr_recursive(msg,message_fields)) < float(self.standard_values[elem]) - float(self.relative_lower_bounds[elem]):
                raise ValueError(str(elem)+' data out of range')
        
    def calibrate(self):
        if not self.previous_msg == None:
            for elem in self.standard_values:
                    self.standard_values[elem] = float(getattr(self.previous_msg,elem))     
            rospy.loginfo("%s consistency checker: calibrated on standard values %s.", self.name, [self.standard_values[b] for b in self.standard_values])
        else:
            rospy.logwarn("%s onsistency checker: Unable to calibrate: No data received yet!", self.name)

class DiffChecker(Checker):
    
    def __init__(self, name, message_field, relative_bounds_diff):
        super(DiffChecker, self).__init__(name, message_field)
        self.relative_bounds_diff = relative_bounds_diff
        self.previous_msg = None
        rospy.loginfo("%s consistency checker: Initialized differential check with relative bounds %s", self.name, [self.relative_bounds_diff[b] for b in self.relative_bounds_diff])

    def __str__(self):
        return str(self.name)+": diff check with relative bounds "+str([self.relative_bounds_diff[b] for b in self.relative_bounds_diff])
        
    def check(self, msg):
        if not self.previous_msg:
            self.previous_msg = msg
        for elem in self.relative_bounds_diff:
            message_fields = self.message_field.split('.')+[elem] if self.message_field != "" else [elem]
            if abs(float(self.getattr_recursive(msg,message_fields)) - float(self.getattr_recursive(self.previous_msg,message_fields))) > float(self.relative_bounds_diff[elem]):
                raise ValueError(str(elem)+' data jumped')
        self.previous_msg = msg

    def calibrate(self):
        self.previous_msg = None

class ConsistencyChecker(threading.Thread):
    
    def __init__(self, config):
        threading.Thread.__init__(self)
        self.config = config
        self.checkers = []
        
        # subscriber and republisher
        rospy.Subscriber(config['input_topic'], self.get_class(config['message_type']), self.callback)
        self.pub = rospy.Publisher(config['output_topic'], self.get_class(config['message_type']), queue_size=config['queue_size'])
        
        # service for calibrating consistency ranges on current values
        self.calibrate_service = rospy.Service(str('~calibrate_'+config['name']), std_srvs.srv.Empty, self.calibrate)

        # different checkers depending on provided configuration
        if 'standard_values' in config and 'relative_upper_bounds' in config and 'relative_lower_bounds' in config:
            self.checkers.append(RangeChecker(config['name'], config['message_field'], config['standard_values'], config['relative_upper_bounds'], config['relative_lower_bounds']))
        if 'relative_bounds_diff' in config:
            self.checkers.append(DiffChecker(config['name'], config['message_field'], config['relative_bounds_diff']))

    # get class object from given name
    def get_class(self, c):
        parts = c.split('.')
        module = ".".join(parts[:-1])
        m = __import__( module )
        for comp in parts[1:]:
            m = getattr(m, comp)            
        return m

    # check for consistency using all checkers when receiving message
    def callback(self, msg):
        try:
            for checker in self.checkers:
                checker.check(msg)
        except ValueError as e:
            rospy.logwarn("%s consistency checker: check failed - %s on topic %s for input:\n%s", self.config['name'], e.message, self.config['input_topic'], msg)
        else:
            self.pub.publish(msg)
            
    def calibrate(self, req):
        # check if we have a range checker at all
        for checker in self.checkers:
            checker.calibrate()
        return std_srvs.srv.EmptyResponse()
               
    def run(self):
        rospy.spin()
        
if __name__ == '__main__':
    try:
        rospy.init_node('consistency_checker')

        # load configuration
        config_filename = rospy.get_param('~config_filename')
        config = load(file(config_filename, 'r'), Loader=Loader)
        for config in config['configurations']:
            thread = ConsistencyChecker(config)
            thread.start()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass

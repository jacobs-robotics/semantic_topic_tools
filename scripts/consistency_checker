#!/usr/bin/env python
import rospy
from yaml import load, Loader

class RangeChecker(object):
    
    def __init__(self, upper_bounds, lower_bounds):
        self.upper_bounds = upper_bounds
        self.lower_bounds = lower_bounds
        rospy.loginfo("Initialized range consistency check with upper bounds %s, lower bounds %s", [self.upper_bounds[b] for b in self.upper_bounds], [self.lower_bounds[b] for b in self.lower_bounds])
        
    def check(self, msg):
        return all(float(getattr(msg,elem)) <= float(self.upper_bounds[elem]) for elem in self.upper_bounds) and all(float(getattr(msg,elem)) >= float(self.lower_bounds[elem]) for elem in self.lower_bounds)

class DiffChecker(object):
    
    def __init__(self, upper_bounds_diff, lower_bounds_diff):
        self.upper_bounds_diff = upper_bounds_diff
        self.lower_bounds_diff = lower_bounds_diff
        rospy.loginfo("Initialized differential consistency check with upper bounds %s, lower bounds %s", [self.upper_bounds_diff[b] for b in self.upper_bounds_diff], [self.lower_bounds_diff[b] for b in self.lower_bounds_diff])
        
    def check(self, msg):
        try:
            self.previous_msg
        except AttributeError:
            self.previous_msg = msg
        if all(abs(float(getattr(msg,elem)) - float(getattr(self.previous_msg,elem))) <= float(self.upper_bounds_diff[elem]) for elem in self.upper_bounds_diff) and all(abs(float(getattr(msg,elem)) - float(getattr(self.previous_msg,elem))) >= float(self.lower_bounds_diff[elem]) for elem in self.lower_bounds_diff):
            self.previous_msg = msg
            return True
        else:
            return False

class ConsistencyChecker(object):
    
    checkers = []
    
    def __init__(self):
        
        # load configuration
        config_filename = rospy.get_param('~config_filename')
        self.config = load(file(config_filename, 'r'), Loader=Loader)
        
        # subscriber and republisher
        rospy.Subscriber(self.config['input_topic'], self.get_class(self.config['message_type']), self.callback)
        self.pub = rospy.Publisher(self.config['output_topic'], self.get_class(self.config['message_type']), queue_size=self.config['queue_size'])

        # different checkers depending on provided configuration
        if 'upper_bounds' in self.config and 'lower_bounds' in self.config:
            self.checkers.append(RangeChecker(self.config['upper_bounds'], self.config['lower_bounds']))
        if 'upper_bounds_diff' in self.config and 'lower_bounds_diff' in self.config:
            self.checkers.append(DiffChecker(self.config['upper_bounds_diff'], self.config['lower_bounds_diff']))

    # get class object from given name
    def get_class(self, c):
        parts = c.split('.')
        module = ".".join(parts[:-1])
        m = __import__( module )
        for comp in parts[1:]:
            m = getattr(m, comp)            
        return m

    # check for consistency using all checkers when receiving message
    def callback(self, msg):
        if all(checker.check(msg) for checker in self.checkers):
            self.pub.publish(msg)
        else:
            rospy.logwarn("Consistency checker: check failed for input\n%s", msg)
               
    def run(self):
        while not rospy.is_shutdown():
            rospy.Rate(self.config['frequency']).sleep
        
if __name__ == '__main__':
    try:
        rospy.init_node('consistency_checker')
        ConsistencyChecker().run()
    except rospy.ROSInterruptException:
        pass
